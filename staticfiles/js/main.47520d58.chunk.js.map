{"version":3,"sources":["components/Popup.js","App.js","index.js"],"names":["Popup","activeItem","setActiveItem","toggle","onSave","handleChange","e","target","name","value","type","checked","newActiveItem","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","id","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","axios","defaults","xsrfCookieName","xsrfHeaderName","App","useState","viewCompleted","setViewCompleted","todoList","setTodoList","modal","setModal","displayCompleted","status","refreshList","get","then","res","data","catch","err","console","log","useEffect","className","filter","item","map","editItem","delete","handleDelete","put","post","headers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47520d58.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} from 'reactstrap';\n\nconst Popup = ({ activeItem, setActiveItem, toggle, onSave }) => {\n  const handleChange = (e) => {\n    let { name, value } = e.target;\n\n    if (e.target.type === 'checkbox') {\n      value = e.target.checked;\n    }\n\n    const newActiveItem = { ...activeItem, [name]: value };\n\n    setActiveItem(newActiveItem);\n  };\n\n  return (\n    <Modal isOpen={true} toggle={toggle}>\n      <ModalHeader toggle={toggle}>Todo Item</ModalHeader>\n      <ModalBody>\n        <Form>\n          <FormGroup>\n            <Label for='todo-title'>Title</Label>\n            <Input\n              type='text'\n              id='todo-title'\n              name='title'\n              value={activeItem.title}\n              onChange={handleChange}\n              placeholder='Enter Todo Title'\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for='todo-description'>Description</Label>\n            <Input\n              type='text'\n              id='todo-description'\n              name='description'\n              value={activeItem.description}\n              onChange={handleChange}\n              placeholder='Enter Todo description'\n            />\n          </FormGroup>\n          <FormGroup check>\n            <Label check>\n              <Input\n                type='checkbox'\n                name='completed'\n                checked={activeItem.completed}\n                onChange={handleChange}\n              />\n              Completed\n            </Label>\n          </FormGroup>\n        </Form>\n      </ModalBody>\n      <ModalFooter>\n        <Button color='success' onClick={() => onSave(activeItem)}>\n          Save\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default Popup;\n","import { useEffect, useState } from 'react';\nimport Popup from './components/Popup';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nfunction App() {\n  // States\n  const [viewCompleted, setViewCompleted] = useState(false);\n  const [todoList, setTodoList] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [activeItem, setActiveItem] = useState({\n    title: '',\n    description: '',\n    completed: false,\n  });\n\n  // Functions\n\n  const toggle = () => {\n    setModal(!modal);\n  };\n\n  const handleSubmit = (item) => {\n    toggle();\n    if (item.id) {\n      // UPDATE request\n      axios.put(`/api/todos/${item.id}/`, item).then((res) => refreshList()); // with a payload\n      return;\n    }\n    //CREATE request\n    axios\n      .post('/api/todos/', item, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      .then((res) => refreshList()); // if handleSubmit does not have an id, then will make post request\n  };\n\n  const handleDelete = (item) => {\n    // DELETE request\n    axios.delete(`/api/todos/${item.id}/`).then((res) => refreshList()); // from router class in rest_framework\n  };\n\n  const createItem = () => {\n    const item = { title: '', description: '', completed: false };\n\n    setActiveItem(item);\n    setModal(!modal);\n  };\n\n  const editItem = (item) => {\n    setActiveItem(item);\n    setModal(!modal);\n  };\n\n  const displayCompleted = (status) => {\n    if (status) {\n      return setViewCompleted(true);\n    }\n\n    return setViewCompleted(false);\n  };\n\n  const renderTabList = () => (\n    <div className='nav nav-tabs'>\n      <span\n        className={viewCompleted ? 'nav-link active' : 'nav-link'}\n        onClick={() => displayCompleted(true)}\n      >\n        Complete\n      </span>\n      <span\n        className={viewCompleted ? 'nav-link' : 'nav-link active'}\n        onClick={() => displayCompleted(false)}\n      >\n        Incomplete\n      </span>\n    </div>\n  );\n\n  const renderItems = () => {\n    const newItems = todoList.filter((item) => item.completed == viewCompleted);\n\n    return newItems.map((item) => (\n      <li\n        key={item.id}\n        className='list-group-item d-flex justify-content-between align-items-center'\n      >\n        <span\n          className={`todo-title mr-2 ${viewCompleted ? 'completed-todo' : ''}`}\n          title={item.description}\n        >\n          {item.title}\n        </span>\n        <span>\n          <button\n            className='btn btn-secondary mr-2'\n            onClick={() => editItem(item)}\n          >\n            Edit\n          </button>\n          <button className='btn btn-danger' onClick={() => handleDelete(item)}>\n            Delete\n          </button>\n        </span>\n      </li>\n    ));\n  };\n\n  const refreshList = () => {\n    axios\n      .get('/api/todos/') // READ request\n      .then((res) => setTodoList(res.data))\n      .catch((err) => console.log(err));\n  };\n\n  // Mount refreshList function at start\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n\n  return (\n    <div className='App'>\n      <main className='container'>\n        <h1 className='text-white text-uppercase text-center my-4'>Todo app</h1>\n        <div className='row'>\n          <div className='col-md-6 col-sm-10 mx-auto p-0'>\n            <div className='card p-3'>\n              <div className='mb-4'>\n                <button className='btn btn-primary' onClick={createItem}>\n                  Add task\n                </button>\n              </div>\n              {renderTabList()}\n              <ul className='list-group list-group-flush border-top-0'>\n                {renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n        {modal ? (\n          <Popup\n            activeItem={activeItem}\n            setActiveItem={setActiveItem}\n            toggle={toggle}\n            onSave={handleSubmit}\n          />\n        ) : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}